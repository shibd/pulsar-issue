/**
 * Autogenerated by Avro
 *
 * DO NOT EDIT DIRECTLY
 */
package com.baozi.pulsar.issue.ci539;

import org.apache.avro.generic.GenericArray;
import org.apache.avro.specific.SpecificData;
import org.apache.avro.util.Utf8;
import org.apache.avro.message.BinaryMessageEncoder;
import org.apache.avro.message.BinaryMessageDecoder;
import org.apache.avro.message.SchemaStore;

@org.apache.avro.specific.AvroGenerated
public class Venues extends org.apache.avro.specific.SpecificRecordBase implements org.apache.avro.specific.SpecificRecord {
  private static final long serialVersionUID = -5036693865848816919L;
  public static final org.apache.avro.Schema SCHEMA$ = new org.apache.avro.Schema.Parser().parse("{\"type\":\"record\",\"name\":\"Venues\",\"namespace\":\"com.baozi.pulsar.issue.ci539\",\"fields\":[{\"name\":\"PSETName\",\"type\":[\"null\",\"string\"],\"default\":null},{\"name\":\"AddLiqFeeOrRebate\",\"type\":[\"null\",{\"type\":\"bytes\",\"logicalType\":\"decimal\",\"precision\":30,\"scale\":2}],\"default\":null}]}");
  public static org.apache.avro.Schema getClassSchema() { return SCHEMA$; }

  private static SpecificData MODEL$ = new SpecificData();
static {
    MODEL$.addLogicalTypeConversion(new org.apache.avro.Conversions.DecimalConversion());
  }

  private static final BinaryMessageEncoder<Venues> ENCODER =
      new BinaryMessageEncoder<Venues>(MODEL$, SCHEMA$);

  private static final BinaryMessageDecoder<Venues> DECODER =
      new BinaryMessageDecoder<Venues>(MODEL$, SCHEMA$);

  /**
   * Return the BinaryMessageEncoder instance used by this class.
   * @return the message encoder used by this class
   */
  public static BinaryMessageEncoder<Venues> getEncoder() {
    return ENCODER;
  }

  /**
   * Return the BinaryMessageDecoder instance used by this class.
   * @return the message decoder used by this class
   */
  public static BinaryMessageDecoder<Venues> getDecoder() {
    return DECODER;
  }

  /**
   * Create a new BinaryMessageDecoder instance for this class that uses the specified {@link SchemaStore}.
   * @param resolver a {@link SchemaStore} used to find schemas by fingerprint
   * @return a BinaryMessageDecoder instance for this class backed by the given SchemaStore
   */
  public static BinaryMessageDecoder<Venues> createDecoder(SchemaStore resolver) {
    return new BinaryMessageDecoder<Venues>(MODEL$, SCHEMA$, resolver);
  }

  /**
   * Serializes this Venues to a ByteBuffer.
   * @return a buffer holding the serialized data for this instance
   * @throws java.io.IOException if this instance could not be serialized
   */
  public java.nio.ByteBuffer toByteBuffer() throws java.io.IOException {
    return ENCODER.encode(this);
  }

  /**
   * Deserializes a Venues from a ByteBuffer.
   * @param b a byte buffer holding serialized data for an instance of this class
   * @return a Venues instance decoded from the given buffer
   * @throws java.io.IOException if the given bytes could not be deserialized into an instance of this class
   */
  public static Venues fromByteBuffer(
      java.nio.ByteBuffer b) throws java.io.IOException {
    return DECODER.decode(b);
  }

   private java.lang.CharSequence PSETName;
   private java.math.BigDecimal AddLiqFeeOrRebate;

  /**
   * Default constructor.  Note that this does not initialize fields
   * to their default values from the schema.  If that is desired then
   * one should use <code>newBuilder()</code>.
   */
  public Venues() {}

  /**
   * All-args constructor.
   * @param PSETName The new value for PSETName
   * @param AddLiqFeeOrRebate The new value for AddLiqFeeOrRebate
   */
  public Venues(java.lang.CharSequence PSETName, java.math.BigDecimal AddLiqFeeOrRebate) {
    this.PSETName = PSETName;
    this.AddLiqFeeOrRebate = AddLiqFeeOrRebate;
  }

  public org.apache.avro.specific.SpecificData getSpecificData() { return MODEL$; }
  public org.apache.avro.Schema getSchema() { return SCHEMA$; }
  // Used by DatumWriter.  Applications should not call.
  public java.lang.Object get(int field$) {
    switch (field$) {
    case 0: return PSETName;
    case 1: return AddLiqFeeOrRebate;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  // Used by DatumReader.  Applications should not call.
  @SuppressWarnings(value="unchecked")
  public void put(int field$, java.lang.Object value$) {
    switch (field$) {
    case 0: PSETName = (java.lang.CharSequence)value$; break;
    case 1: AddLiqFeeOrRebate = (java.math.BigDecimal)value$; break;
    default: throw new IndexOutOfBoundsException("Invalid index: " + field$);
    }
  }

  /**
   * Gets the value of the 'PSETName' field.
   * @return The value of the 'PSETName' field.
   */
  public java.lang.CharSequence getPSETName() {
    return PSETName;
  }


  /**
   * Sets the value of the 'PSETName' field.
   * @param value the value to set.
   */
  public void setPSETName(java.lang.CharSequence value) {
    this.PSETName = value;
  }

  /**
   * Gets the value of the 'AddLiqFeeOrRebate' field.
   * @return The value of the 'AddLiqFeeOrRebate' field.
   */
  public java.math.BigDecimal getAddLiqFeeOrRebate() {
    return AddLiqFeeOrRebate;
  }


  /**
   * Sets the value of the 'AddLiqFeeOrRebate' field.
   * @param value the value to set.
   */
  public void setAddLiqFeeOrRebate(java.math.BigDecimal value) {
    this.AddLiqFeeOrRebate = value;
  }

  /**
   * Creates a new Venues RecordBuilder.
   * @return A new Venues RecordBuilder
   */
  public static com.baozi.pulsar.issue.ci539.Venues.Builder newBuilder() {
    return new com.baozi.pulsar.issue.ci539.Venues.Builder();
  }

  /**
   * Creates a new Venues RecordBuilder by copying an existing Builder.
   * @param other The existing builder to copy.
   * @return A new Venues RecordBuilder
   */
  public static com.baozi.pulsar.issue.ci539.Venues.Builder newBuilder(com.baozi.pulsar.issue.ci539.Venues.Builder other) {
    if (other == null) {
      return new com.baozi.pulsar.issue.ci539.Venues.Builder();
    } else {
      return new com.baozi.pulsar.issue.ci539.Venues.Builder(other);
    }
  }

  /**
   * Creates a new Venues RecordBuilder by copying an existing Venues instance.
   * @param other The existing instance to copy.
   * @return A new Venues RecordBuilder
   */
  public static com.baozi.pulsar.issue.ci539.Venues.Builder newBuilder(com.baozi.pulsar.issue.ci539.Venues other) {
    if (other == null) {
      return new com.baozi.pulsar.issue.ci539.Venues.Builder();
    } else {
      return new com.baozi.pulsar.issue.ci539.Venues.Builder(other);
    }
  }

  /**
   * RecordBuilder for Venues instances.
   */
  @org.apache.avro.specific.AvroGenerated
  public static class Builder extends org.apache.avro.specific.SpecificRecordBuilderBase<Venues>
    implements org.apache.avro.data.RecordBuilder<Venues> {

    private java.lang.CharSequence PSETName;
    private java.math.BigDecimal AddLiqFeeOrRebate;

    /** Creates a new Builder */
    private Builder() {
      super(SCHEMA$);
    }

    /**
     * Creates a Builder by copying an existing Builder.
     * @param other The existing Builder to copy.
     */
    private Builder(com.baozi.pulsar.issue.ci539.Venues.Builder other) {
      super(other);
      if (isValidValue(fields()[0], other.PSETName)) {
        this.PSETName = data().deepCopy(fields()[0].schema(), other.PSETName);
        fieldSetFlags()[0] = other.fieldSetFlags()[0];
      }
      if (isValidValue(fields()[1], other.AddLiqFeeOrRebate)) {
        this.AddLiqFeeOrRebate = data().deepCopy(fields()[1].schema(), other.AddLiqFeeOrRebate);
        fieldSetFlags()[1] = other.fieldSetFlags()[1];
      }
    }

    /**
     * Creates a Builder by copying an existing Venues instance
     * @param other The existing instance to copy.
     */
    private Builder(com.baozi.pulsar.issue.ci539.Venues other) {
      super(SCHEMA$);
      if (isValidValue(fields()[0], other.PSETName)) {
        this.PSETName = data().deepCopy(fields()[0].schema(), other.PSETName);
        fieldSetFlags()[0] = true;
      }
      if (isValidValue(fields()[1], other.AddLiqFeeOrRebate)) {
        this.AddLiqFeeOrRebate = data().deepCopy(fields()[1].schema(), other.AddLiqFeeOrRebate);
        fieldSetFlags()[1] = true;
      }
    }

    /**
      * Gets the value of the 'PSETName' field.
      * @return The value.
      */
    public java.lang.CharSequence getPSETName() {
      return PSETName;
    }


    /**
      * Sets the value of the 'PSETName' field.
      * @param value The value of 'PSETName'.
      * @return This builder.
      */
    public com.baozi.pulsar.issue.ci539.Venues.Builder setPSETName(java.lang.CharSequence value) {
      validate(fields()[0], value);
      this.PSETName = value;
      fieldSetFlags()[0] = true;
      return this;
    }

    /**
      * Checks whether the 'PSETName' field has been set.
      * @return True if the 'PSETName' field has been set, false otherwise.
      */
    public boolean hasPSETName() {
      return fieldSetFlags()[0];
    }


    /**
      * Clears the value of the 'PSETName' field.
      * @return This builder.
      */
    public com.baozi.pulsar.issue.ci539.Venues.Builder clearPSETName() {
      PSETName = null;
      fieldSetFlags()[0] = false;
      return this;
    }

    /**
      * Gets the value of the 'AddLiqFeeOrRebate' field.
      * @return The value.
      */
    public java.math.BigDecimal getAddLiqFeeOrRebate() {
      return AddLiqFeeOrRebate;
    }


    /**
      * Sets the value of the 'AddLiqFeeOrRebate' field.
      * @param value The value of 'AddLiqFeeOrRebate'.
      * @return This builder.
      */
    public com.baozi.pulsar.issue.ci539.Venues.Builder setAddLiqFeeOrRebate(java.math.BigDecimal value) {
      validate(fields()[1], value);
      this.AddLiqFeeOrRebate = value;
      fieldSetFlags()[1] = true;
      return this;
    }

    /**
      * Checks whether the 'AddLiqFeeOrRebate' field has been set.
      * @return True if the 'AddLiqFeeOrRebate' field has been set, false otherwise.
      */
    public boolean hasAddLiqFeeOrRebate() {
      return fieldSetFlags()[1];
    }


    /**
      * Clears the value of the 'AddLiqFeeOrRebate' field.
      * @return This builder.
      */
    public com.baozi.pulsar.issue.ci539.Venues.Builder clearAddLiqFeeOrRebate() {
      AddLiqFeeOrRebate = null;
      fieldSetFlags()[1] = false;
      return this;
    }

    @Override
    @SuppressWarnings("unchecked")
    public Venues build() {
      try {
        Venues record = new Venues();
        record.PSETName = fieldSetFlags()[0] ? this.PSETName : (java.lang.CharSequence) defaultValue(fields()[0]);
        record.AddLiqFeeOrRebate = fieldSetFlags()[1] ? this.AddLiqFeeOrRebate : (java.math.BigDecimal) defaultValue(fields()[1]);
        return record;
      } catch (org.apache.avro.AvroMissingFieldException e) {
        throw e;
      } catch (java.lang.Exception e) {
        throw new org.apache.avro.AvroRuntimeException(e);
      }
    }
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumWriter<Venues>
    WRITER$ = (org.apache.avro.io.DatumWriter<Venues>)MODEL$.createDatumWriter(SCHEMA$);

  @Override public void writeExternal(java.io.ObjectOutput out)
    throws java.io.IOException {
    WRITER$.write(this, SpecificData.getEncoder(out));
  }

  @SuppressWarnings("unchecked")
  private static final org.apache.avro.io.DatumReader<Venues>
    READER$ = (org.apache.avro.io.DatumReader<Venues>)MODEL$.createDatumReader(SCHEMA$);

  @Override public void readExternal(java.io.ObjectInput in)
    throws java.io.IOException {
    READER$.read(this, SpecificData.getDecoder(in));
  }

}










